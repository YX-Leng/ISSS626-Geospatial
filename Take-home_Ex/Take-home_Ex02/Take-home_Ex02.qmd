---
title: "Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics"
author: "Leng Yi Xiu"
date: "Oct 14 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1 Overview

Tourism is a major industry in Thailand, contributing around 20% to the country's gross domestic product (GDP). In 2019, Thailand generated 90 billion US dollars from both domestic and international tourism. However, due to the COVID-19 pandemic, this revenue sharply declined to 24 billion US dollars in 2020.

It's also important to recognize that Thailand's tourism economy is not evenly distributed across the country. The tourism economy of Thailand is mainly focused on five provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.

## 1.1 Objective

The objective of this exercise is to explore whether key indicators of Thailand's tourism economy are independent of spatial and spatio-temporal factors. If dependencies exist, we want to identify clusters, outliers, and emerging hot or cold spots. The exercise involves the following tasks:

-   Create a geospatial data layer of Thailand's provinces (including Bangkok) as an *`sf`* polygon layer.

-   Develop a tourism economy indicators layer for the study area, also in *`sf`* polygon features.

-   Derive a tourism economy indicator layer in a spatio-temporal format (*`spacetime s3 class`*) using *`sfdep`*, maintaining a monthly and yearly time series.

-   Perform **global spatial autocorrelation analysis** using *`sfdep`* to determine overall spatial dependence.

-   Conduct **local spatial autocorrelation analysis** to detect specific clusters and outliers.

-   Carry out an **emerging hotspot analysis** to identify trends in hot or cold spots over time

-   Describe the spatial patterns revealed by the analysis above.

------------------------------------------------------------------------

# 2 Getting Started

The code chunk below installs and loads **sf, spdep, ggstatsplot, tmap, tidyverse, knitr, GWmodel** packages into R environment

```{r}
pacman::p_load(sf, spdep, ggstatsplot, tmap, tidyverse, knitr, GWmodel)
```

------------------------------------------------------------------------

# 3 Data Preparation

For the purpose of this exercise, we will be using two data sets:

-   Thailand Domestic Tourism Statistics (**thaitour**)\
    The dataset contains statistics on domestic tourism in Thailand, by province, from Jan 2019 to Feb 2023. Information includes the number of tourists, the occupancy rate, the profits generated by tourism as well as the nationality of the tourists (Thai vs. foreign).

-   Thailand Subnational Adminstrative Boundaries (**province**)\
    The dataset contains Thailand's administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries.

## 3.1 Importing data into R Environment

::: panel-tabset
## Tourism Statistics

```{r}
thaitour <- read_csv ("data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv")
```

```{r}
list(thaitour)
```

ðŸ’¡To check the different attributes in the data set

```{r}
thaitour %>%
  count(variable) %>%
  print()
```

ðŸ’¡To check the different provinces in the data set

```{r}
thaitour %>%
  count(province_eng) %>%
  print()
```

## Administrative Boundaries

```{r}
province <- st_read(dsn = "data/rawdata", layer = "tha_admbnda_adm1_rtsd_20220121")
```

```{r}
st_crs(province) <- 4326 
province <- st_transform(province, crs = 32647)
head(province,5)
```
:::

## 3.2 Data Wrangling

### *3.2.1 Check for duplicates*

To ensure no duplicate rows are presented and only the English columns are selected, the following code chunk is used:

```{r}
thaitour <- thaitour %>% 
  distinct() %>% 
        select(date,province_eng,region_eng,variable,value)
```

### *3.2.2 Perform Relational Join*

Perform a left join of both data sets and select only columns that will be used in analysis:

```{r}
thai <- left_join(thaitour,province,
                  by = c("province_eng" = "ADM1_EN")) %>%
  select(1:7,21)
```

### *3.2.3 Filter for missing, mismatched values*

```{r}
filter_thai <- thai %>%
  filter(is.na(Shape_Area))

filter_thai %>%
  distinct(province_eng) %>%
  print()
```

::: callout-important
## Findings

The above code chunk filters for rows with empty Shape_Area and Geometry - this is indicative that there are mismatches between the 2 data sets and the province name are not compatible between the Tourism Statistics and Administrative Boundaries.

The 8 provinces have been misspelled in the Tourism Statistics data set and will need to be corrected before the data sets can be merged correctly.
:::

### *3.2.4 Correct province names in Tourism Statistics*

```{r}
thaitour_v2 <- thaitour %>%
  mutate(province_eng = case_when(
    province_eng == "Lopburi" ~ "Lop Buri",
    province_eng == "Chainat" ~ "Chai Nat",
    province_eng == "Chonburi" ~ "Chon Buri",
    province_eng == "Prachinburi" ~ "Prachin Buri",
    province_eng == "Phang Nga" ~ "Phangnga",
    province_eng == "Buriram" ~ "Buri Ram",
    province_eng == "Sisaket" ~ "Si Sa Ket",
    province_eng == "Nong Bua Lamphu" ~ "Nong Bua Lam Phu",
    TRUE ~ province_eng  # Keep all other values unchanged
  ))
```

### *3.2.5 Perform Relational Join and check that no more mismatched provinces*

```{r}
thai_v2 <- left_join(thaitour_v2,province,
                  by = c("province_eng" = "ADM1_EN")) %>%
  select(1:7,21)
```

```{r}
colSums(is.na(thai_v2))
```

### *3.2.6 Check for values less than zero*

```{r}
value_neg <- thai_v2 %>%
  filter(value < 0)

value_neg
```

::: callout-important
## Findings

The above code chunk filters out 2 records of foreign revenue where the value is negative. For purpose of analysis in this exercise, these 2 records will be corrected to zero as revenue should not be negative.

Final data set will remain with 30,800 observations.
:::

```{r}
thai_v2 <- thai_v2 %>%
  mutate(value = pmax(value, 0))
```

### *3.2.7 Split out the 8 attributes to unique columns*

```{r}
thai_final <- thai_v2 %>%
  pivot_wider(names_from = variable, values_from = value)
print(thai_final)
```

### *3.2.8 Save transformed data in rds folder*

```{r}
write_rds(thai_final, "data/rds/thai_final.rds")
```

------------------------------------------------------------------------

# 4 Exploratory Data Analysis (EDA)
