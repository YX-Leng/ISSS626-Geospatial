---
title: "Hands-on Exercise 4"
author: "Leng Yi Xiu"
date: "Sep 13 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

## Spatial Weights and Applications

In this hands-on exercise, we will learn how to compute spatial weights using R:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

### Getting Started

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

ðŸ’¡Import shapefile into R

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

ðŸ’¡Import csv file into R

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

ðŸ’¡Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## Visualizing Regional Development Indicator

Preparing a basemap and choropleth map showing the distribution of GDPPC 2012 by using *`qtm()`* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

In this section, we will use *`poly2nb()`* of **spdep** package to compute contiguity weight matrices for the study area.

::: {.callout-note appearance="simple"}
There are 2 main types of continuity spatial weights:

-   **Rook Contiguity**: This method defines neighbors based on shared edges (borders). If two areas share a common boundary, they are considered neighbors and given a non-zero weight in the spatial weights matrix.

-   **Queen Contiguity**: This method considers areas as neighbors if they share either an edge or a corner (a vertex). This is a broader definition of neighbors compared to rook contiguity.
:::

### **Computing (QUEEN) contiguity based neighbours**

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

::: {.callout-note appearance="simple"}
The summary report shows:

-   88 area units in Hunan

-   Most connected area has 11 neighbours

-   2 area units with only 1 neighbour
:::

ðŸ’¡ List of neighbours for Polygon 1

```{r}
wm_q[[1]]
```

ðŸ’¡ County name for Polygon 1

```{r}
hunan$County[1]
```

ðŸ’¡ County name for 5 neighboring polygons

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

ðŸ’¡ Display the complete weight matrix

```{r}
str(wm_q)
```

### **Creating (ROOK) contiguity based neighbours**

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### **Visualising contiguity weights**

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

#### ðŸ’¡Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### ðŸ’¡Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### ðŸ’¡Plotting both contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Computing distance based neighbours

In this section, we learn how to derive distance-based weight matrices by using *`dnearneigh()`* of **spdep** package.

### **Determine the cut-off distance**

1.  Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using *`knearneigh()`* of **spdep**.
2.  Convert the knn object returned by *`knearneigh()`* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using *`knn2nb()`*.
3.  Return the length of neighbour relationship edges by using *`nbdists()`* of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
4.  Remove the list structure of the returned object by using *`unlist()`.*

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
str(wm_d62)
```

ðŸ’¡Combine *`table()`* and *`card()`* of **spdep**

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

ðŸ’¡Plot fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

ðŸ’¡Plot both side by side

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### **Computing adaptive distance weight matrix**

ðŸ’¡It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

ðŸ’¡Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

In this section, we will learn how to derive a spatial weight matrix based on Inversed Distance method.

ðŸ’¡Compute the distances between areas by using *`nbdists()`* of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardized Weights Matrix

ðŸ’¡Assign weights to each neighboring polygon - each neighboring polygon will be assigned equal weight.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

ðŸ’¡To see the weight of the polygon's eight neighbors type

```{r}
rswm_q$weights[10]
```

ðŸ’¡row standardized distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, we will learn how to create four different spatial lagged variables:

::: panel-tabset
## Spatial lag with row-standardized weights

ðŸ’¡Compute the average neighbor GDPPC value for each polygon (spatially lagged values)

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

ðŸ’¡Append the spatially lag GDPPC values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

ðŸ’¡Plot both the GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial lag as a sum of neighbouring values

ðŸ’¡Start by applying a function that will assign a value of 1 per each neighbor

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

ðŸ’¡Use *`lag.listw`* to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

```{r}
hunan <- left_join(hunan, lag.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element.

ðŸ’¡Add the diagonal element to the neighbor list

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

ðŸ’¡Obtain weights

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

ðŸ’¡Create the lag variable from weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

ðŸ’¡Convert the lag variable into a data.frame

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

ðŸ’¡Append

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## Spatial window sum

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

ðŸ’¡Assign binary weights to the neighbor structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

ðŸ’¡Assign weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

ðŸ’¡Compute the lag variable and convert to data.frame

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

ðŸ’¡Append

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

ðŸ’¡Compare and Plot

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
:::
