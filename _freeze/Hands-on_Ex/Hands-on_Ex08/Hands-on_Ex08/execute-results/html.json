{
  "hash": "0555693219650fe80e14e3d132860586",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 8\"\nauthor: \"Leng Yi Xiu\"\ndate: \"Oct 20 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# **Geographically Weighted Predictive Models**\n\nIn this in-class exercise, we will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, we will acquire the skills of:\n\n-   preparing training and test data sets by using appropriate data sampling methods,\n\n-   calibrating predictive models by using both geospatial statistical learning and machine learning methods,\n\n-   comparing and selecting the best model for predicting the future outcome,\n\n-   predicting the future outcomes by using the best model calibrated.\n\n### Installing and Loading R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse)\n```\n:::\n\n\n### Reading data file to rds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/model/mdata.rds\")\n```\n:::\n\n\n### Data Sampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(mdata, \n                              prop = 0.65/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n```\n:::\n\n\n### Computing Correlation Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\n## Observations\n\nAll the correlation values are \\< 0.8, hence there is no signs of multicollinearity.\n:::\n\n## Building a non-spatial multiple linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/model/train_data.rds\")\ntest_data <- read_rds(\"data/model/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-182973  -40983     214   36333  216466 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              100615.32   33948.03   2.964 0.003109 ** \nfloor_area_sqm             2701.11     290.80   9.288  < 2e-16 ***\nstorey_order              14318.61    1081.91  13.235  < 2e-16 ***\nremaining_lease_mths        358.03      14.62  24.489  < 2e-16 ***\nPROX_CBD                 -15839.82     622.75 -25.435  < 2e-16 ***\nPROX_ELDERLYCARE         -12965.52    3246.99  -3.993 6.99e-05 ***\nPROX_HAWKER              -19577.84    4052.68  -4.831 1.57e-06 ***\nPROX_MRT                 -38627.77    5641.61  -6.847 1.30e-11 ***\nPROX_PARK                -16836.36    4698.04  -3.584 0.000355 ***\nPROX_MALL                -18699.58    6514.55  -2.870 0.004184 ** \nPROX_SUPERMARKET         -16907.23   12975.35  -1.303 0.192860    \nWITHIN_350M_KINDERGARTEN   7599.30    2092.34   3.632 0.000295 ***\nWITHIN_350M_CHILDCARE     -2343.56    1206.58  -1.942 0.052374 .  \nWITHIN_350M_BUS            1118.15     728.26   1.535 0.125004    \nWITHIN_1KM_PRISCH        -11190.94    1593.48  -7.023 3.97e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 62250 on 1018 degrees of freedom\nMultiple R-squared:  0.737,\tAdjusted R-squared:  0.7334 \nF-statistic: 203.8 on 14 and 1018 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\" ) \n```\n:::\n\n\n## GWR Predictive Method\n\nIn this section, we will learn how to calibrate a model to predict HDB resale price with geographically weighted regression method of GWmodel package.\n\n### Converting the sf data frame to spatial point data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1033 \nextent      : 11646.69, 42370.04, 28330.23, 48675.05  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,  PROX_GOOD_PRISCH,          PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             75,            1,                  555, 1.14923182318838, 4.28110190953706e-07, 0.0560200251289142, 0.0437298005890327, 0.0441643212802781, 0.107363170703005, 0.0864828813466827, 7.18337180115856e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1110000,            126,           17,                 1148, 19.4237844042343,     3.28231449363414,   2.76474077583521,    2.0902251353839,   2.38376543636855,  10.4013344251086,   2.25269448786787,     0.79249074802552,     1.36375821567757,                        5,                    13, ... \n```\n\n\n:::\n:::\n\n\n### Computing adaptive bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 646 CV score: 3.705225e+12 \nAdaptive bandwidth: 407 CV score: 3.459649e+12 \nAdaptive bandwidth: 259 CV score: 3.075856e+12 \nAdaptive bandwidth: 167 CV score: 2.735854e+12 \nAdaptive bandwidth: 111 CV score: 2.330795e+12 \nAdaptive bandwidth: 75 CV score: 1.94138e+12 \nAdaptive bandwidth: 54 CV score: 1.720829e+12 \nAdaptive bandwidth: 40 CV score: 1.567301e+12 \nAdaptive bandwidth: 32 CV score: 1.469731e+12 \nAdaptive bandwidth: 26 CV score: 1.407063e+12 \nAdaptive bandwidth: 23 CV score: 1.389329e+12 \nAdaptive bandwidth: 20 CV score: 1.369195e+12 \nAdaptive bandwidth: 19 CV score: 1.370467e+12 \nAdaptive bandwidth: 21 CV score: 1.372606e+12 \nAdaptive bandwidth: 19 CV score: 1.370467e+12 \nAdaptive bandwidth: 20 CV score: 1.369195e+12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive, \"data/model/bw_adaptive.rds\")\n```\n:::\n\n\n### Constructing the adaptive bandwidth gwr model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/model/bw_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive, \"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\n### Retrive gwr output object\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- read_rds(\"data/model/gwr_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-20 23:29:36.46889 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 1033\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-182973  -40983     214   36333  216466 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              100615.32   33948.03   2.964 0.003109 ** \n   floor_area_sqm             2701.11     290.80   9.288  < 2e-16 ***\n   storey_order              14318.61    1081.91  13.235  < 2e-16 ***\n   remaining_lease_mths        358.03      14.62  24.489  < 2e-16 ***\n   PROX_CBD                 -15839.82     622.75 -25.435  < 2e-16 ***\n   PROX_ELDERLYCARE         -12965.52    3246.99  -3.993 6.99e-05 ***\n   PROX_HAWKER              -19577.84    4052.68  -4.831 1.57e-06 ***\n   PROX_MRT                 -38627.77    5641.61  -6.847 1.30e-11 ***\n   PROX_PARK                -16836.36    4698.04  -3.584 0.000355 ***\n   PROX_MALL                -18699.58    6514.55  -2.870 0.004184 ** \n   PROX_SUPERMARKET         -16907.23   12975.35  -1.303 0.192860    \n   WITHIN_350M_KINDERGARTEN   7599.30    2092.34   3.632 0.000295 ***\n   WITHIN_350M_CHILDCARE     -2343.56    1206.58  -1.942 0.052374 .  \n   WITHIN_350M_BUS            1118.15     728.26   1.535 0.125004    \n   WITHIN_1KM_PRISCH        -11190.94    1593.48  -7.023 3.97e-12 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 62250 on 1018 degrees of freedom\n   Multiple R-squared: 0.737\n   Adjusted R-squared: 0.7334 \n   F-statistic: 203.8 on 14 and 1018 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.944398e+12\n   Sigma(hat): 61853.04\n   AIC:  25754.7\n   AICc:  25755.24\n   BIC:  24911.79\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -1606574.88  -205555.05   -10333.29   224622.06\n   floor_area_sqm             -19728.56     1075.81     2159.67     3218.83\n   storey_order                 5160.36     8855.68    10857.73    13755.41\n   remaining_lease_mths         -264.84      360.58      437.84      514.75\n   PROX_CBD                  -112677.46   -23797.97   -13137.45    -3540.02\n   PROX_ELDERLYCARE          -216805.36   -35151.98     -784.61    19389.59\n   PROX_HAWKER               -201106.60   -35093.37   -13686.20    20920.91\n   PROX_MRT                  -409278.22   -81315.14   -53350.62   -31393.30\n   PROX_PARK                 -140728.79   -34677.13   -11746.86    12595.80\n   PROX_MALL                 -471282.79   -39646.66    -7669.37    24828.14\n   PROX_SUPERMARKET          -332321.40   -50515.97   -13303.16    27590.68\n   WITHIN_350M_KINDERGARTEN   -51449.25    -6908.76    -1443.83     3911.72\n   WITHIN_350M_CHILDCARE      -13394.62    -2552.17      327.40     3366.35\n   WITHIN_350M_BUS            -10355.01    -1730.57      843.72     3188.02\n   WITHIN_1KM_PRISCH          -31706.72    -5408.36      309.17     6137.09\n                                  Max.\n   Intercept                3437851.86\n   floor_area_sqm              8856.79\n   storey_order               23946.18\n   remaining_lease_mths         914.62\n   PROX_CBD                   72009.18\n   PROX_ELDERLYCARE          170592.15\n   PROX_HAWKER               196691.90\n   PROX_MRT                  243744.54\n   PROX_PARK                 167134.40\n   PROX_MALL                 441978.43\n   PROX_SUPERMARKET          201279.70\n   WITHIN_350M_KINDERGARTEN   37326.31\n   WITHIN_350M_CHILDCARE      14394.69\n   WITHIN_350M_BUS            10041.04\n   WITHIN_1KM_PRISCH          31566.71\n   ************************Diagnostic information*************************\n   Number of data points: 1033 \n   Effective number of parameters (2trace(S) - trace(S'S)): 414.015 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 618.985 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 24745.45 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 24072.66 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 25047.72 \n   Residual sum of squares: 575632610777 \n   R-square value:  0.9616222 \n   Adjusted R-square value:  0.9359113 \n\n   ***********************************************************************\n   Program stops at: 2024-10-20 23:29:37.519678 \n```\n\n\n:::\n:::\n\n\n### Converting the test data from sf data frame to Spatial point data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp <- test_data %>%\n  as_Spatial()\ntest_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 14868 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230000,             74,            1,                  546, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            138,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n```\n\n\n:::\n:::\n\n\n\n## Preparing coordinates data\n\n### Extracting coordinates data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\" )\n```\n:::\n\n\n### Dropping geometry field\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n### Calibrating Random Forest Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data)\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1033 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2210664349 \nR squared (OOB):                  0.8478973 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf, \"data/model/rf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- read_rds(\"data/model/rf.rds\")\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1033 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2210664349 \nR squared (OOB):                  0.8478973 \n```\n\n\n:::\n:::\n\n\n## Calibrating Geographical Random Forest Model\n\n### Calibrating using training data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nNumber of Observations: 1033\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of Independent Variables: 14\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nKernel: Adaptive\nNeightbours: 55\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Global ML Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1033 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2004758260 \nR squared (OOB):                  0.8620644 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nImportance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm             storey_order     remaining_lease_mths \n            7.058437e+11             1.592290e+12             2.820781e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.755159e+12             6.255159e+11             6.266019e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            8.643189e+11             5.713762e+11             4.626917e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            4.204194e+11             1.116340e+11             2.681633e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.276879e+11             7.403791e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean Square Error (Not OOB): 376490838.445\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (Not OOB) %: 97.407\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (Not OOB): 20428.036\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (Not OOB): 20428.508\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Local Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals OOB:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-288000.0  -21478.5   -1119.6    -209.3   18766.0  225147.3 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals Predicted (Not OOB):\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-27266.28  -3283.21   -175.32    -72.34   2794.00  33732.99 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nLocal Variable Importance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                Min          Max         Mean          StD\nfloor_area_sqm            862084726 182773909695  24312609856  27446207487\nstorey_order              774249150 353262117406  32126189715  55931017624\nremaining_lease_mths     2968466961 598427420310 104618682850 137887753045\nPROX_CBD                 1634455264 238227706920  29557082526  38226380937\nPROX_ELDERLYCARE         1247555457 154632109775  24580400408  27203673549\nPROX_HAWKER              1218554589 222524615204  19237339712  20613101090\nPROX_MRT                 1456879158 242651111333  29890693601  45632171368\nPROX_PARK                1468568341 155276696998  21588694080  23339113357\nPROX_MALL                1320022708 245903917111  28421411858  37692176790\nPROX_SUPERMARKET         1313921890 211892777353  19254748498  26928833153\nWITHIN_350M_KINDERGARTEN  198090733  44419986107   5415271660   7312415737\nWITHIN_350M_CHILDCARE     504201570 325044357893  20207332331  43832035542\nWITHIN_350M_BUS           749712922 157515584730  12504451868  15333772729\nWITHIN_1KM_PRISCH         262050112  77775852162   6685714283   8748207011\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean squared error (OOB): 2002423578.8\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (OOB) %: 86.209\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (OOB): 22154.406\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (OOB): 22154.878\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMean squared error Predicted (Not OOB): 49576394.927\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared Predicted (Not OOB) %: 99.659\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC Predicted (Not OOB): 18333.753\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc Predicted (Not OOB): 18334.225\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCalculation time (in seconds): 22.3898\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n### Predicting using test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n💡 **Predicting with test data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- write_rds(gwRF_pred, \"data/model/GRF_pred.rds\")\n```\n:::\n\n\n💡 **Convert the output into a data frame**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")\n```\n:::\n\n\n### Calculating Root Mean Square Error\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 42364.51\n```\n\n\n:::\n:::\n\n\n### Visualising the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}