{
  "hash": "041d2c61af06cf6da63d90670d963d44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Leng Yi Xiu\"\ndate: \"Oct 14 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# 1 Overview\n\nTourism is a major industry in Thailand, contributing around 20% to the country's gross domestic product (GDP). In 2019, Thailand generated 90 billion US dollars from both domestic and international tourism. However, due to the COVID-19 pandemic, this revenue sharply declined to 24 billion US dollars in 2020.\n\nIt's also important to recognize that Thailand's tourism economy is not evenly distributed across the country. The tourism economy of Thailand is mainly focused on five provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.\n\n## 1.1 Objective\n\nThe objective of this exercise is to explore whether key indicators of Thailand's tourism economy are independent of spatial and spatio-temporal factors. If dependencies exist, we want to identify clusters, outliers, and emerging hot or cold spots. The exercise involves the following tasks:\n\n-   Create a geospatial data layer of Thailand's provinces (including Bangkok) as an *`sf`* polygon layer.\n\n-   Develop a tourism economy indicators layer for the study area, also in *`sf`* polygon features.\n\n-   Derive a tourism economy indicator layer in a spatio-temporal format (*`spacetime s3 class`*) using *`sfdep`*, maintaining a monthly and yearly time series.\n\n-   Perform **global spatial autocorrelation analysis** using *`sfdep`* to determine overall spatial dependence.\n\n-   Conduct **local spatial autocorrelation analysis** to detect specific clusters and outliers.\n\n-   Carry out an **emerging hotspot analysis** to identify trends in hot or cold spots over time\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n------------------------------------------------------------------------\n\n# 2 Getting Started\n\nThe code chunk below installs and loads **sf, sfdep, ggstatsplot, tmap, tidyverse, spdep, patchwork** packages into R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, ggstatsplot, tmap, tidyverse, spdep, patchwork)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# 3 Data Preparation\n\nFor the purpose of this exercise, we will be using two data sets:\n\n-   Thailand Domestic Tourism Statistics (**thaitour**)\\\n    The dataset contains statistics on domestic tourism in Thailand, by province, from Jan 2019 to Feb 2023. Information includes the number of tourists, the occupancy rate, the profits generated by tourism as well as the nationality of the tourists (Thai vs. foreign).\n\n-   Thailand Subnational Adminstrative Boundaries (**province**)\\\n    The dataset contains Thailand's administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries.\n\n## 3.1 Importing data into R Environment\n\n::: panel-tabset\n## Tourism Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaitour <- read_csv (\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(thaitour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 30,800 × 7\n   date       province_thai province_eng   region_thai region_eng variable value\n   <date>     <chr>         <chr>          <chr>       <chr>      <chr>    <dbl>\n 1 2019-01-01 กรุงเทพมหานคร  Bangkok        ภาคกลาง     central    ratio_t…  93.4\n 2 2019-01-01 ลพบุรี          Lopburi        ภาคกลาง     central    ratio_t…  61.3\n 3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon S… ภาคกลาง     central    ratio_t…  73.4\n 4 2019-01-01 สระบุรี         Saraburi       ภาคกลาง     central    ratio_t…  67.3\n 5 2019-01-01 ชัยนาท         Chainat        ภาคกลาง     central    ratio_t…  79.3\n 6 2019-01-01 นครปฐม        Nakhon Pathom  ภาคกลาง     central    ratio_t…  71.7\n 7 2019-01-01 สิงห์บุรี         Sing Buri      ภาคกลาง     central    ratio_t…  64.6\n 8 2019-01-01 อ่างทอง        Ang Thong      ภาคกลาง     central    ratio_t…  71.2\n 9 2019-01-01 นนทบุรี         Nonthaburi     ภาคกลาง     central    ratio_t…  75.1\n10 2019-01-01 ปทุมธานี        Pathum Thani   ภาคกลาง     central    ratio_t…  60.8\n# ℹ 30,790 more rows\n```\n\n\n:::\n:::\n\n\n💡To check the different attributes in the data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaitour %>%\n  count(variable) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  variable               n\n  <chr>              <int>\n1 no_tourist_all      3850\n2 no_tourist_foreign  3850\n3 no_tourist_stay     3850\n4 no_tourist_thai     3850\n5 ratio_tourist_stay  3850\n6 revenue_all         3850\n7 revenue_foreign     3850\n8 revenue_thai        3850\n```\n\n\n:::\n:::\n\n\n💡To check the different provinces in the data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaitour %>%\n  count(province_eng) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 77 × 2\n   province_eng      n\n   <chr>         <int>\n 1 Amnat Charoen   400\n 2 Ang Thong       400\n 3 Bangkok         400\n 4 Bueng Kan       400\n 5 Buriram         400\n 6 Chachoengsao    400\n 7 Chainat         400\n 8 Chaiyaphum      400\n 9 Chanthaburi     400\n10 Chiang Mai      400\n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\n## Administrative Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- st_read(dsn = \"data/rawdata\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `D:\\2. SMU - MITB\\Term 4\\ISSS626 Geospatial\\YX-Leng\\ISSS626-Geospatial\\Take-home_Ex\\Take-home_Ex02\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(province) <- 4326\nprovince <- st_transform(province, crs = 32647)\nhead(province,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 630867.9 ymin: 1490796 xmax: 712440.5 ymax: 1622722\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1   2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2   1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3   1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4   1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n  ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n2     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n3     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n4     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n5     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n  ADM0_PCODE       date    validOn    validTo                       geometry\n1         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((674339.8 15...\n2         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((687139.8 15...\n3         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((644817.9 15...\n4         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((704086 1575...\n5         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662941.6 16...\n```\n\n\n:::\n:::\n\n:::\n\n## 3.2 Data Wrangling\n\n### *3.2.1 Check for duplicates & drop unwanted columns*\n\nTo ensure no duplicate rows are presented and only the English columns are selected, the following code chunk is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaitour <- thaitour %>% \n  distinct() %>% \n        select(date,province_eng,region_eng,variable,value)\n```\n:::\n\n\n### *3.2.2 Perform Relational Join*\n\nPerform a left join of both data sets and select only columns that will be used in analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai <- left_join(thaitour,province,\n                  by = c(\"province_eng\" = \"ADM1_EN\"), relationship = \"many-to-many\") %>%\n  select(1:7,21)\n```\n:::\n\n\n### *3.2.3 Filter for missing / mismatched values*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter_thai <- thai %>%\n  filter(is.na(Shape_Area))\n\nfilter_thai %>%\n  distinct(province_eng) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  province_eng   \n  <chr>          \n1 Lopburi        \n2 Chainat        \n3 Chonburi       \n4 Prachinburi    \n5 Phang Nga      \n6 Buriram        \n7 Sisaket        \n8 Nong Bua Lamphu\n```\n\n\n:::\n:::\n\n\n::: callout-important\n## Findings\n\nThe above code chunk filters for rows with empty Shape_Area and Geometry - this is indicative that there are mismatches between the 2 data sets and the province name are not compatible between the Tourism Statistics and Administrative Boundaries.\n\nThe 8 provinces have been misspelled in the Tourism Statistics data set and will need to be corrected before the data sets can be merged correctly.\n:::\n\n### *3.2.4 Correct province names in Tourism Statistics*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthaitour_v2 <- thaitour %>%\n  mutate(province_eng = case_when(\n    province_eng == \"Lopburi\" ~ \"Lop Buri\",\n    province_eng == \"Chainat\" ~ \"Chai Nat\",\n    province_eng == \"Chonburi\" ~ \"Chon Buri\",\n    province_eng == \"Prachinburi\" ~ \"Prachin Buri\",\n    province_eng == \"Phang Nga\" ~ \"Phangnga\",\n    province_eng == \"Buriram\" ~ \"Buri Ram\",\n    province_eng == \"Sisaket\" ~ \"Si Sa Ket\",\n    province_eng == \"Nong Bua Lamphu\" ~ \"Nong Bua Lam Phu\",\n    TRUE ~ province_eng  # Keep all other values unchanged\n  ))\n```\n:::\n\n\n### *3.2.5 Perform Relational Join & check that there are no more mismatched provinces*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_v2 <- left_join(thaitour_v2,province,\n                  by = c(\"province_eng\" = \"ADM1_EN\"), relationship = \"many-to-many\") %>%\n  select(1:7,21)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(thai_v2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### *3.2.6 Check for values less than zero (errors)*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalue_neg <- thai_v2 %>%\n  filter(value < 0)\n\nvalue_neg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  date.x     province_eng  region_eng variable       value Shape_Leng Shape_Area\n  <date>     <chr>         <chr>      <chr>          <dbl>      <dbl>      <dbl>\n1 2021-07-01 Nakhon Pathom central    revenue_forei… -4250       2.46      0.179\n2 2021-08-01 Nakhon Pathom central    revenue_forei… -4250       2.46      0.179\n# ℹ 1 more variable: geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n::: callout-important\n## Findings\n\nThe above code chunk filters out 2 records of foreign revenue where the value is negative. For purpose of analysis in this exercise, these 2 records will be corrected to zero as revenue should not be negative.\n\nFinal data set will remain with 30,800 observations.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_v2 <- thai_v2 %>%\n  mutate(value = pmax(value, 0))\n```\n:::\n\n\n### *3.2.7 Split out the 8 attributes to unique columns*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_final <- thai_v2 %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n### *3.2.8 Split out the date column to Year and Month*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_final <- thai_final %>%\n  mutate(\n    year = year(date.x),\n    month = month(date.x)\n  )\n```\n:::\n\n\n### *3.2.9*\n\n### *3.2.10 Save transformed data in rds folder*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_final <- st_as_sf(thai_final, crs = 32647)\nthai_final\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3850 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 3,850 × 16\n   date.x     province_eng             region_eng Shape_Leng Shape_Area\n * <date>     <chr>                    <chr>           <dbl>      <dbl>\n 1 2019-01-01 Bangkok                  central          2.42     0.131 \n 2 2019-01-01 Lop Buri                 central          5.69     0.546 \n 3 2019-01-01 Phra Nakhon Si Ayutthaya central          3.04     0.214 \n 4 2019-01-01 Saraburi                 central          4.77     0.292 \n 5 2019-01-01 Chai Nat                 central          2.90     0.209 \n 6 2019-01-01 Nakhon Pathom            central          2.46     0.179 \n 7 2019-01-01 Sing Buri                central          1.78     0.0687\n 8 2019-01-01 Ang Thong                central          1.74     0.0792\n 9 2019-01-01 Nonthaburi               central          1.25     0.0532\n10 2019-01-01 Pathum Thani             central          1.88     0.127 \n# ℹ 3,840 more rows\n# ℹ 11 more variables: geometry <MULTIPOLYGON [m]>, ratio_tourist_stay <dbl>,\n#   no_tourist_stay <dbl>, no_tourist_all <dbl>, no_tourist_thai <dbl>,\n#   no_tourist_foreign <dbl>, revenue_all <dbl>, revenue_thai <dbl>,\n#   revenue_foreign <dbl>, year <dbl>, month <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(thai_final, \"data/rds/thai_final.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# 4 Exploratory Data Analysis (EDA)\n\nIn order to study the impact and changes of the Covid-19 pandemic on Thailand's tourism industry and the changes pre-covid and post-covid, we will be focusing on 2 time periods for the EDA, namely:\n\n-   Pre-Covid : Year 2019\n\n-   Post-Covid : Year 2022\n\nThe comparison is to show the changes in tourism trends post-covid and highlight any concerns in terms of accommodation occupancy rates as well as foreign travelers to Thailand. To highlight that for ease of analysis, EDA will be focused on the five key provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.\n\n## 4.1 Filter data set by year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_2019 <- thai_final %>%\n  filter(year %in% c(\"2019\")) %>%\n   group_by(province_eng) %>% \n  summarise(across(c(ratio_tourist_stay/12, no_tourist_stay, no_tourist_all, no_tourist_thai, \n                     no_tourist_foreign, revenue_all, revenue_thai, revenue_foreign), \n                   ~sum(.x, na.rm = TRUE))) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_2022 <- thai_final %>%\n  filter(year %in% c(\"2022\")) %>%\n   group_by(province_eng) %>% \n  summarise(across(c(ratio_tourist_stay/12, no_tourist_stay, no_tourist_all, no_tourist_thai, \n                     no_tourist_foreign, revenue_all, revenue_thai, revenue_foreign), \n                   ~sum(.x, na.rm = TRUE))) \n```\n:::\n\n\n## 4.2 Plot total revenue by Province\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(thai_2019) +\n  tm_fill(\"revenue_all\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Total Revenue\") +\n  tm_layout(main.title = \"Distribution of total revenue by Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) + \n    tm_text(\"province_eng\", \n           size = 0.35,    \n           col = \"black\", \n           remove.overlap = TRUE) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.54, 0.54, 0.54, 0.50, 0.38. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\n## 4.3 Comparison between local and foreign revenue\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine both data sets into a single data frame\nthai_combined <- thai_2019 %>%\n  mutate(year = \"2019\") %>%\n  select(province_eng, revenue_thai, revenue_foreign, year) %>%\n  bind_rows(thai_2022 %>% mutate(year = \"2022\") %>% select(province_eng, revenue_thai, revenue_foreign, year)) %>%\n  filter(province_eng %in% c(\"Bangkok\", \"Phuket\", \"Chiang Mai\", \"Sukhothai\", \"Phetchaburi\"))\n\n# Create a facet plot\nggplot(thai_combined, aes(x = reorder(province_eng, (revenue_thai + revenue_foreign)), y = (revenue_thai + revenue_foreign))) +\n  geom_bar(stat = \"identity\", position = \"stack\", fill = \"pink\") +\n  geom_bar(stat = \"identity\", position = \"stack\", aes(y = revenue_foreign), fill = \"blue\") +\n  labs(title = \"Comparison of Total Revenue by Province (2019 vs 2022)\", x = \"Province\", y = \"Revenue\") +\n  theme_minimal() +\n  coord_flip() +\n  facet_wrap(~ year)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## 4.4 Comparison between local and foreign tourists (count)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine both data sets into a single data frame\nthai_combined <- thai_2019 %>%\n  mutate(year = \"2019\") %>%\n  select(province_eng, no_tourist_thai, no_tourist_foreign, year) %>%\n  bind_rows(thai_2022 %>% mutate(year = \"2022\") %>% select(province_eng, no_tourist_thai, no_tourist_foreign, year)) %>%\n  filter(province_eng %in% c(\"Bangkok\", \"Phuket\", \"Chiang Mai\", \"Sukhothai\", \"Phetchaburi\"))\n\n# Create a facet plot\nggplot(thai_combined, aes(x = reorder(province_eng, (no_tourist_thai + no_tourist_foreign)), y = (no_tourist_thai + no_tourist_foreign))) +\n  geom_bar(stat = \"identity\", position = \"stack\", fill = \"pink\") +\n  geom_bar(stat = \"identity\", position = \"stack\", aes(y = no_tourist_foreign), fill = \"blue\") +\n  labs(title = \"Comparison of Number of Tourists by Province (2019 vs 2022)\", x = \"Province\", y = \"Number of Tourists\") +\n  theme_minimal() +\n  coord_flip() +\n  facet_wrap(~ year)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n# 5 Global Spatial Autocorrelation Analysis\n\n::: callout-important\n## Assumption\n\nAs geographic boundaries are assumed to remain the same over the years, spatial analysis will use data from **Year 2019 only** for ease of analysis.\n:::\n\n## 5.1 Spatial Weights Matrix\n\nThe spatial weights matrix defines the degree of interaction or influence that one geographic unit has on another based on their spatial relationships. There are two commonly used methods of spatial weights: **contiguity-based** and **distanced-based**.\n\n### *5.1.1 Contiguity-based*\n\nContiguity weights define relationships based on whether geographic units share a boundary. For example, in a grid or map, two areas are considered contiguous if they touch each other. For **contiguity-based** matrix, it can be further broken down into 2 methods:\n\n::: panel-tabset\n## Queen Contiguity\n\nNeighbors need to only share a common vertex **or** edge, which is more encompassing than Rook.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_q <- poly2nb(thai_2019, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thai_2019, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thai_2019, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(thai_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n## Rook Contiguity\n\nNeighbors need to share a common edge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_r <- poly2nb(thai_2019, \n                queen=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thai_2019, queen = FALSE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thai_2019, queen = FALSE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(thai_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n## Summary\n\nBoth Queen and Rook continuity return similar results:\n\n1.  On average, each province is connected to approximately 4.57 other provinces\n\n2.  There is 1 province (region 48) that has no links, meaning it is isolated and probably an island\n\n3.  2 disjoint connected subgraphs suggest that the spatial regions can be divided into 2 distinct groups where the provinces are connected within each group, but there are no connections between the 2 groups. This indicates a fragmented spatial layout.\n\nSince the provinces are sparsely connected, we will look into a distance-based approach to see if it can provide a more nuanced view of the spatial relationships.\n:::\n\n### *5.1.2 Distance-based*\n\nOn the other hand, distance-based weights identifies neighbors of region points by Euclidean distance with a distance band with lower and upper bounds.\n\nFor **distance-based** matrix, it can be further broken down into fixed or adaptive weight matrix. In order to calculate the distance-based matrix, we will first need to associate each polygon with a point and its coordinates can be derived using the *`st_centroid()`* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the centroid\ncentroid2019 <- st_centroid(thai_2019)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\ncoords <- st_coordinates(centroid2019)\n```\n:::\n\n\n::: panel-tabset\n## Fixed\n\nFinding the largest first nearest neighbour distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- knn2nb(knearneigh(coords, k = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords, k = 1)): neighbour object has 19\nsub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1dists <- unlist(nbdists(k1, coords))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   51966   64530   63281   76823  110987 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_2019$province_eng[match(max(k1dists), k1dists)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Prachuap Khiri Khan\"\n```\n\n\n:::\n:::\n\n\nComputing the fixed distance weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfixedwm <- dnearneigh(coords,0,110000)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in dnearneigh(coords, 0, 110000): neighbour object has 3 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nfixedwm \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 344 \nPercentage nonzero weights: 5.80199 \nAverage number of links: 4.467532 \n1 region with no links:\n50\n3 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nplot(thai_2019$geometry, border = \"lightgrey\",main=\"1st nearest neighbours\" )\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(thai_2019$geometry, border = \"lightgrey\", main = \"Distance Link\")\nplot(fixedwm, coords, add = TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nFrom the observations of the fixed-distance weight matrix, average number of links remain at approximately 4.5 other provinces. \nHowever, provinces have been separated into 3 separate groups and this can be noticed from the charts above where neighbour links are dense in the central area only.\n\nWith this uneven distribution of neighbours, we should directly control the numbers of neighbours using k-nearest neighbours in the adaptive-based method. \n\n\n## Adaptive\n\nWe will set k = 5 based on the average number of links being approximately 4.5 to 5. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nadaptwm <- knn2nb(knearneigh(coords, k=5))\nadaptwm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 385 \nPercentage nonzero weights: 6.493506 \nAverage number of links: 5 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nplot(thai_2019$geometry, border = \"lightgrey\",main=\"5 nearest neighbours\" )\nplot(adaptwm, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(thai_2019$geometry, border = \"lightgrey\", main = \"Distance Link w KNN\")\nplot(adaptwm, coords, add = TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### *5.1.3 Selecting a spatial weight matrix*\n\nSelecting a spatial weight matrix is use is dependent on the geographical area of interest and the focus of the study.\n\nBetween contiguity-based and distance-based spatial weight matrices, we lean towards distance-based matrices as:\n\n1.  Based on observations from contiguity-based matrices, provinces are sparsely connected in Thailand.\n\nWithin distance-based matrices, we will select adaptive distance-based spatial weight matrix as it allows weights to vary based on local characteristics.\n\n### *5.1.4 Row-Standardised Weights Matrix*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm <- nb2listw(adaptwm,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 385 \nPercentage nonzero weights: 6.493506 \nAverage number of links: 5 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n   n   nn S0    S1  S2\nW 77 5929 77 26.84 320\n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\nWe will use 2 methods, **Moran’s I** and **Geary’s C** to test the following hypothesis:\n\n-   H0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\n\n-   H1: Data is more spatially clustered than expected by chance alone\n:::\n\n### *5.1.5 Moran’s I*\n\nTest for foreign revenue: \n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_2019$revenue_foreign,\n           listw = rswm,\n           zero.policy = TRUE,\n           na.action = na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_2019$revenue_foreign  \nweights: rswm    \n\nMoran I statistic standard deviate = 1.1917, p-value = 0.1167\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.041701033      -0.013157895       0.002119192 \n```\n\n\n:::\n:::\n\n\nTest for local revenue: \n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_2019$revenue_thai,\n           listw = rswm,\n           zero.policy = TRUE,\n           na.action = na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_2019$revenue_thai  \nweights: rswm    \n\nMoran I statistic standard deviate = 0.092824, p-value = 0.463\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0106735491     -0.0131578947      0.0007163151 \n```\n\n\n:::\n:::\n\n\n\n### *5.1.6 Geary’s C*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngearyforeign = geary.mc(thai_2019$revenue_foreign,\n                 listw = rswm,\n                 nsim = 999)\ngearyforeign\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  thai_2019$revenue_foreign \nweights: rswm  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.0173, observed rank = 575, p-value = 0.575\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngearylocal = geary.mc(thai_2019$revenue_thai,\n                 listw = rswm,\n                 nsim = 999)\ngearylocal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  thai_2019$revenue_thai \nweights: rswm  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1743, observed rank = 804, p-value = 0.804\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n# 6 Local spatial autocorrelation analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_foreign <- localmoran(thai_2019$revenue_foreign, rswm)\nhead(lm_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.05335205 -0.0007083803 0.01031993  0.5321588      0.5946160\n2  0.05006711 -0.0007079398 0.01031351  0.4999736      0.6170937\n3 -1.58240527 -0.6807443195 3.16840336 -0.5065508      0.6124700\n4  0.05308560 -0.0007094232 0.01033511  0.5291570      0.5966965\n5  0.05235692 -0.0006906366 0.01006161  0.5288490      0.5969102\n6 -0.06196013 -0.0007063399 0.01029022 -0.6038383      0.5459512\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_2019.lm_foreign <- cbind(thai_2019,lm_foreign) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_foreign.map <- tm_shape(thai_2019.lm_foreign) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I Map \\n(Foreign Revenue)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\npvalue_foreign.map <- tm_shape(thai_2019.lm_foreign) + \n                tm_fill(col = \"Pr.Ii\",\n                       breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                       palette = \"-Blues\",\n                       title = \"Local Moran's I p-values\") + \n                tm_borders(alpha = 0.3)+ \n  tm_layout(main.title = \"Local Moran's I p-values Map \\n(Foreign Revenue)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(lm_foreign.map, pvalue_foreign.map, asp = 1, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_local <- localmoran(thai_2019$revenue_thai, rswm)\nhead(lm_local)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.07650238 -0.0012408675 0.018067746  0.5783766      0.5630099\n2  0.06266033 -0.0011397349 0.016596878  0.4952311      0.6204370\n3 -1.95746160 -0.9160064611 1.121662557 -0.9833530      0.3254337\n4  0.06448995 -0.0011259666 0.016396609  0.5124272      0.6083520\n5  0.03320684 -0.0006203111 0.009037699  0.3558250      0.7219716\n6 -0.03038357 -0.0005430918 0.007913254 -0.3354503      0.7372854\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_2019.lm_local <- cbind(thai_2019,lm_local) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_local.map <- tm_shape(thai_2019.lm_local) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I Map \\n(Thai Revenue)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\npvalue_local.map <- tm_shape(thai_2019.lm_local) + \n                tm_fill(col = \"Pr.Ii\",\n                       breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                       palette = \"-Blues\",\n                       title = \"Local Moran's I p-values\") + \n                tm_borders(alpha = 0.3)+ \n  tm_layout(main.title = \"Local Moran's I p-values Map \\n(Thai Revenue)\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(lm_local.map, pvalue_local.map, asp = 1, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n# 7 Emerging hotspot analysis\n\n## 7.1 Creating a Time Series Cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#thai_st <- as_spacetime(thai_final,\n                        #.geometry = \"geometry\",\n                        #.loc_col = \"province_eng\",  \n                        #.time_col = \"date.x\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#is_spacetime_cube(thai_st)\n```\n:::\n\n\n\n# 8 Conclusion\n\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}